{"version":3,"sources":["resources/alarm.mp3","components/navbar.jsx","components/timer.jsx","components/log.jsx","components/about.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","navbar","to","className","href","Component","ALARM","Audio","ALARM_SOUND","timer","props","document","title","state","minutes","seconds","intervalID","mode","TOTAL_SECONDS","this","counter","setInterval","setState","clearInterval","setCookie","play","currentDate","Moment","duration","logDetail","format","add","Cookies","get","set","parseInt","expires","onClick","studyTime","shortBreak","longBreak","toLocaleString","minimumIntegerDigits","startTimer","pauseTimer","resetTimer","LogHeader","LogRow","sessionType","sessionStart","sessionEnd","deleteLog","id","LogsTable","COOKIES_KEYS","LOGS","LOGS_RENDERED","temp","getJSON","Object","keys","forEach","key","includes","push","bind","COOKIE_KEY","tempIndex","indexOf","filter","_","index","remove","map","post","Mode","Start","End","about","App","basename","path","exact","component","Timer","Log","About","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d07fdf7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.2f154994.mp3\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport './navbar.css'\r\n\r\nexport default class navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Link to='/'><p className='name'>Study Planner</p></Link>\r\n                <nav>\r\n                    <ul className='nav-links' href='#'>\r\n                        <Link to='/log'>\r\n                            <li>Log</li>\r\n                        </Link>\r\n                        <Link to='/about'>\r\n                            <li>About</li>\r\n                        </Link>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Moment from 'moment';\r\nimport Cookies from 'js-cookie';\r\nimport './timer.css';\r\nimport ALARM_SOUND from '../resources/alarm.mp3';\r\n\r\nconst DEFAULT_MINUTES = 25;\r\nconst DEFAULT_SECONDS = 0;\r\nconst SHORT_BREAK = 5; //Minutes\r\nconst LONG_BREAK = 10; //Minutes\r\n\r\nconst ALARM = new Audio(ALARM_SOUND);\r\n\r\n/*\r\n    The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s. \r\n    The technique uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks.\r\n\r\n    There are six steps in the original technique:\r\n        1. Decide on the task to be done.\r\n        2. Set the pomodoro timer (traditionally to 25 minutes).\r\n        3. Work on the task.\r\n        4. End work when the timer rings and put a checkmark on a piece of paper.\r\n        5. If you have fewer than four checkmarks, take a short break (3–5 minutes) and then return to step 2; otherwise continue to step 6.\r\n        6. After four pomodoros, take a longer break (15–30 minutes), reset your checkmark count to zero, then go to step 1\r\n\r\n        https://en.wikipedia.org/wiki/Pomodoro_Technique\r\n*/\r\n\r\nexport default class timer extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        document.title = 'Study Planner';\r\n\r\n        this.state = {\r\n            minutes : DEFAULT_MINUTES,\r\n            seconds : DEFAULT_SECONDS,\r\n            intervalID : null,\r\n            mode: 'study'\r\n        }\r\n    }\r\n\r\n    // Start the timer. Will continue to run until finished or stopped by the user.\r\n    startTimer(){\r\n\r\n        const TOTAL_SECONDS = (this.state.minutes * 60) + this.state.seconds;\r\n\r\n        let counter = 0;\r\n\r\n        this.state.intervalID = setInterval(() =>{\r\n\r\n            if(this.state.minutes !== 0 || this.state.seconds !== 0){\r\n\r\n                if(this.state.seconds === 60){\r\n                    this.setState({minutes: this.state.minutes - 1});\r\n                }\r\n\r\n                if(this.state.seconds === 0){\r\n                    this.setState({minutes: this.state.minutes - 1, seconds: 60});\r\n                }\r\n\r\n                this.setState({seconds: this.state.seconds - 1});\r\n            }\r\n\r\n            counter += 1;\r\n\r\n            //Set the cookie and play the alarm sound once the full duration of the timer has been reached.\r\n            if(counter === TOTAL_SECONDS) {\r\n                clearInterval(this.state.intervalID);\r\n                this.setCookie();\r\n                ALARM.play();\r\n            }\r\n\r\n        }, 1000);\r\n    }\r\n\r\n    setCookie(){\r\n\r\n        const currentDate = Moment();\r\n\r\n        let duration = 0;\r\n\r\n        if(this.state.mode === 'study'){\r\n            duration = 25;\r\n        } else if(this.state.mode === 'short_break'){\r\n            duration = 5;\r\n        } else if(this.state.mode === 'long_break'){\r\n            duration = 10;\r\n        }\r\n\r\n        //Logs format\r\n        const logDetail = {\r\n            \"Mode\"  : this.state.mode,\r\n            \"Start\" : currentDate.format('dddd, MMMM Do YYYY - HH:mm:ss'),\r\n            \"End\"   : currentDate.add(duration, 'minutes').format('dddd, MMMM Do YYYY - HH:mm:ss')\r\n        }\r\n\r\n        //Cookies - Used to store logs\r\n        //Has an expiration of 10 days\r\n        if(Cookies.get('counter')){\r\n            Cookies.set('counter', parseInt(Cookies.get('counter')) + 1, {expires: 10});\r\n            Cookies.set(`log${Cookies.get('counter')}`, logDetail, {expires: 10});\r\n        } else {\r\n            Cookies.set('counter', 1, {expires: 10})\r\n            Cookies.set(`log${Cookies.get('counter')}`, logDetail, {expires: 10});\r\n        }\r\n    }\r\n\r\n    pauseTimer(){\r\n        this.setState({minutes : this.state.minutes});\r\n        clearInterval(this.state.intervalID);\r\n    }\r\n\r\n    resetTimer(){\r\n\r\n        if(this.state.mode === 'study'){\r\n            this.setState({minutes: DEFAULT_MINUTES, seconds: DEFAULT_SECONDS});\r\n        } else if(this.state.mode === 'short_break'){\r\n            this.setState({minutes: SHORT_BREAK, seconds: DEFAULT_SECONDS});\r\n        } else {\r\n            this.setState({minutes: LONG_BREAK, seconds: DEFAULT_SECONDS});\r\n        }\r\n        clearInterval(this.state.intervalID);\r\n    }\r\n\r\n    studyTime(){\r\n        this.setState({minutes: DEFAULT_MINUTES, seconds: DEFAULT_SECONDS, mode: 'study'})\r\n        clearInterval(this.state.intervalID);\r\n    }\r\n\r\n    shortBreak(){\r\n        this.setState({minutes: SHORT_BREAK, seconds: DEFAULT_SECONDS, mode: 'short_break'})\r\n        clearInterval(this.state.intervalID);\r\n    }\r\n\r\n    longBreak(){\r\n        this.setState({minutes: LONG_BREAK, seconds: DEFAULT_SECONDS, mode: 'long_break'})\r\n        clearInterval(this.state.intervalID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='timer-container'>\r\n\r\n                <div>\r\n                    <ul className='timer-mode'>\r\n                        <li><button onClick = { () => this.studyTime() }>Study</button></li>\r\n                        <li><button onClick = { () => this.shortBreak() }>Short Break</button></li>\r\n                        <li><button onClick = { () => this.longBreak() }>Long Break</button></li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div>\r\n                    <p className='timer'>{this.state.minutes.toLocaleString('en-GB', {minimumIntegerDigits : 2})}:{(this.state.seconds % 60).toLocaleString('en-GB', {minimumIntegerDigits : 2})}</p>\r\n                </div>\r\n                \r\n                <div className='timer-controls'>\r\n                    <ul>\r\n                        <li><button onClick = { () => { this.startTimer() }}>Start</button></li>\r\n                        <li><button onClick = { () => { this.pauseTimer() } }>Stop</button></li>\r\n                        <li><button onClick = { () => { this.resetTimer() } }>Reset</button></li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport './log.css'\r\n\r\n// const TEST_DATA = [\r\n//     {   \"sessionType\"  : \"Study\",\r\n//         \"sessionStart\" : \"12:00\",\r\n//         \"sessionEnd\"   : \"12:25\"\r\n//     },\r\n//     {   \"sessionType\"  : \"Short Break\",\r\n//         \"sessionStart\" : \"13:00\",\r\n//         \"sessionEnd\"   : \"13:05\"\r\n//     },\r\n//     {   \"sessionType\"  : \"Long Break\",\r\n//         \"sessionStart\" : \"15:00\",\r\n//         \"sessionEnd\"   : \"15:10\"\r\n//     },\r\n//     {   \"sessionType\"  : \"Study\",\r\n//         \"sessionStart\" : \"17:00\",\r\n//         \"sessionEnd\"   : \"17:25\"\r\n//     }\r\n// ];\r\n\r\n//Table Header Component\r\nconst LogHeader = () => {\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                <th>Session Type</th>\r\n                <th>Start Time</th>\r\n                <th>End Time</th>\r\n                <th></th>\r\n            </tr> \r\n        </thead>\r\n    )\r\n}\r\n\r\n//Table Content Component\r\nconst LogRow = (props) => {\r\n    return(\r\n        <tr>\r\n            <td>{props.sessionType}</td>\r\n            <td>{props.sessionStart}</td>\r\n            <td>{props.sessionEnd}</td>\r\n            <td><button className='delete-log-button' onClick = { () => {props.deleteLog(props.id)} }>X</button></td>\r\n        </tr>)\r\n}\r\n\r\n// Log Table Component\r\n// Dispays Logs that is stored locally using cookies.\r\nexport default class LogsTable extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        document.title = 'Logs';\r\n\r\n        this.state = {\r\n            COOKIES_KEYS : [],\r\n            LOGS: [],\r\n            LOGS_RENDERED : []\r\n        }\r\n        \r\n        let temp = Cookies.getJSON();\r\n        delete temp['counter'];\r\n        this.state.COOKIES_KEYS = Object.keys(temp);\r\n\r\n        this.state.COOKIES_KEYS.forEach(key => {\r\n            if(this.state.LOGS_RENDERED.includes(key)){\r\n                return;\r\n            } else {\r\n                this.state.LOGS.push(temp[key]);\r\n                this.state.LOGS_RENDERED.push(key);\r\n            }\r\n        });\r\n\r\n        this.deleteLog = this.deleteLog.bind(this);\r\n\r\n    }\r\n\r\n    deleteLog(COOKIE_KEY){\r\n\r\n        let tempIndex = this.state.COOKIES_KEYS.indexOf(COOKIE_KEY);\r\n\r\n        this.setState({\r\n                    COOKIES_KEYS : this.state.COOKIES_KEYS.filter((_, index) => index !== tempIndex),\r\n                    LOGS : this.state.LOGS.filter((_, index) => index !== tempIndex),\r\n                    LOGS_RENDERED: this.state.LOGS_RENDERED.filter((_, index) => index !== tempIndex)\r\n                });\r\n        Cookies.remove(COOKIE_KEY);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='log-container'>\r\n                <table className='log-table'>\r\n                    {/* <caption>Past Sessions</caption> */}\r\n                    <LogHeader/ >\r\n                    <tbody>\r\n                        {this.state.LOGS.map((post, index) => (\r\n                            <LogRow\r\n                            id={this.state.COOKIES_KEYS[index]}\r\n                            sessionType={post.Mode}\r\n                            sessionStart={post.Start}\r\n                            sessionEnd={post.End}\r\n                            deleteLog = {this.deleteLog} />\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './about.css'\r\n\r\nexport default class about extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        document.title = 'About';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='about-container'>\r\n                <h2>About</h2>\r\n                <p>\r\n                    Study Planer uses a time management method developed by Francesco Cirillo. This technique is called the Pomodoro Technique. \r\n                    The Pomodoro Technique has been used by countless apps and websites.\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Navbar from './components/navbar';\r\nimport Timer from './components/timer'\r\nimport Log from './components/log'\r\nimport About from './components/about'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename='/'>\r\n      <div>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route path='/' exact component={Timer} />\r\n          <Route path='/log' component={Log} />\r\n          <Route path='/about' component={About} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}